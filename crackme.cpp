#include <sys/stat.h>
#include <string.h>
#include <stdio.h>
#include <fcntl.h>
#include <unistd.h>
#include <ctype.h>
#include <sys/ptrace.h>
#include <signal.h>
#include <thread>
#include <sys/mman.h>

// Unencrypted payload
//static char payload[] = { 0x04, 0xb0, 0x2d, 0xe5, 0x00, 0xb0, 0x8d, 0xe2, 0x0c, 0xd0, 0x4d, 0xe2, 0x08, 0x00, 0x0b, 0xe5, 0x08, 0x30, 0x1b, 0xe5, 0x00, 0x30, 0xd3, 0xe5, 0x7a, 0x00, 0x53, 0xe3, 0x01, 0x00, 0x00, 0x0a, 0x01, 0x30, 0xa0, 0xe3, 0x2a, 0x00, 0x00, 0xea, 0x08, 0x30, 0x1b, 0xe5, 0x01, 0x30, 0x83, 0xe2, 0x00, 0x30, 0xd3, 0xe5, 0x69, 0x00, 0x53, 0xe3, 0x01, 0x00, 0x00, 0x0a, 0x01, 0x30, 0xa0, 0xe3, 0x23, 0x00, 0x00, 0xea, 0x08, 0x30, 0x1b, 0xe5, 0x02, 0x30, 0x83, 0xe2, 0x00, 0x30, 0xd3, 0xe5, 0x70, 0x00, 0x53, 0xe3, 0x01, 0x00, 0x00, 0x0a, 0x01, 0x30, 0xa0, 0xe3, 0x1c, 0x00, 0x00, 0xea, 0x08, 0x30, 0x1b, 0xe5, 0x03, 0x30, 0x83, 0xe2, 0x00, 0x30, 0xd3, 0xe5, 0x6c, 0x00, 0x53, 0xe3, 0x01, 0x00, 0x00, 0x0a, 0x01, 0x30, 0xa0, 0xe3, 0x15, 0x00, 0x00, 0xea, 0x08, 0x30, 0x1b, 0xe5, 0x04, 0x30, 0x83, 0xe2, 0x00, 0x30, 0xd3, 0xe5, 0x69, 0x00, 0x53, 0xe3, 0x01, 0x00, 0x00, 0x0a, 0x01, 0x30, 0xa0, 0xe3, 0x0e, 0x00, 0x00, 0xea, 0x08, 0x30, 0x1b, 0xe5, 0x05, 0x30, 0x83, 0xe2, 0x00, 0x30, 0xd3, 0xe5, 0x6e, 0x00, 0x53, 0xe3, 0x01, 0x00, 0x00, 0x0a, 0x01, 0x30, 0xa0, 0xe3, 0x07, 0x00, 0x00, 0xea, 0x08, 0x30, 0x1b, 0xe5, 0x06, 0x30, 0x83, 0xe2, 0x00, 0x30, 0xd3, 0xe5, 0x65, 0x00, 0x53, 0xe3, 0x01, 0x00, 0x00, 0x0a, 0x01, 0x30, 0xa0, 0xe3, 0x00, 0x00, 0x00, 0xea, 0x00, 0x30, 0xa0, 0xe3, 0x03, 0x00, 0xa0, 0xe1, 0x00, 0xd0, 0x8b, 0xe2, 0x04, 0xb0, 0x9d, 0xe4, 0x1e, 0xff, 0x2f, 0xe1, 0x04, 0xb0, 0x2d, 0xe5, 0x00, 0xb0, 0x8d, 0xe2, 0x14, 0xd0, 0x4d, 0xe2, 0x10, 0x00, 0x0b, 0xe5, 0xea, 0x30, 0xa0, 0xe3, 0x08, 0x30, 0x0b, 0xe5, 0x08, 0x10, 0x1b, 0xe5, 0x01, 0x20, 0xa0, 0xe1, 0x82, 0x21, 0xa0, 0xe1, 0x01, 0x20, 0x82, 0xe0, 0x82, 0x32, 0xa0, 0xe1, 0x02, 0x30, 0x43, 0xe0, 0x83, 0x30, 0xa0, 0xe1, 0x01, 0x30, 0x43, 0xe0, 0x83, 0x31, 0xa0, 0xe1, 0x08, 0x30, 0x0b, 0xe5, 0x08, 0x30, 0x1b, 0xe5, 0x03, 0x32, 0xa0, 0xe1, 0x08, 0x30, 0x0b, 0xe5, 0x00, 0x00, 0xa0, 0xe1, 0x03, 0x00, 0xa0, 0xe1, 0x00, 0xd0, 0x8b, 0xe2, 0x04, 0xb0, 0x9d, 0xe4, 0x1e, 0xff, 0x2f, 0xe1, 0x00, 0x48, 0x2d, 0xe9, 0x04, 0xb0, 0x8d, 0xe2, 0x10, 0xd0, 0x4d, 0xe2, 0x94, 0x20, 0x9f, 0xe5, 0x94, 0x30, 0x9f, 0xe5, 0x03, 0x30, 0x42, 0xe0, 0xe4, 0x30, 0x83, 0xe2, 0x0c, 0x30, 0x0b, 0xe5, 0x0c, 0x30, 0x1b, 0xe5, 0x03, 0x00, 0xa0, 0xe1, 0x36, 0xff, 0xff, 0xeb, 0x00, 0x30, 0xa0, 0xe1, 0x10, 0x30, 0x0b, 0xe5, 0x74, 0x10, 0x9f, 0xe5, 0x0c, 0x30, 0x1b, 0xe5, 0x03, 0x20, 0xa0, 0xe1, 0x10, 0x00, 0x1b, 0xe5, 0x2c, 0xff, 0xff, 0xeb, 0x0c, 0x10, 0x1b, 0xe5, 0x60, 0x00, 0x9f, 0xe5, 0x23, 0xff, 0xff, 0xeb, 0x00, 0x30, 0xa0, 0xe3, 0x08, 0x30, 0x0b, 0xe5, 0x08, 0x20, 0x1b, 0xe5, 0x0c, 0x30, 0x1b, 0xe5, 0x03, 0x00, 0x52, 0xe1, 0x0a, 0x00, 0x00, 0xaa, 0x08, 0x30, 0x1b, 0xe5, 0x10, 0x20, 0x1b, 0xe5, 0x03, 0x30, 0x82, 0xe0, 0x00, 0x30, 0xd3, 0xe5, 0x03, 0x10, 0xa0, 0xe1, 0x30, 0x00, 0x9f, 0xe5 };

// Encrypted payload
static char payload[] = { 0xfb, 0x4e, 0xd0, 0x19, 0xfb, 0x4a, 0x74, 0x1a, 0xfb, 0x26, 0xb8, 0x16, 0xfb, 0xf2, 0xfa, 0x15, 0xe7, 0xde, 0xf6, 0x09, 0xeb, 0xda, 0x3a, 0x0d, 0x9d, 0xe6, 0xb6, 0x07, 0xe2, 0xe2, 0xe1, 0xea, 0xde, 0xee, 0x7d, 0x3f, 0xf1, 0xda, 0xd9, 0x32, 0xdf, 0xe6, 0xce, 0x31, 0xd2, 0xe2, 0x52, 0x32, 0xcf, 0xfe, 0x1e, 0x29, 0xa2, 0xca, 0x9a, 0x2b, 0xc6, 0xc6, 0xc5, 0xce, 0xc2, 0xf2, 0x61, 0x23, 0x9c, 0xbe, 0xbd, 0x56, 0xb3, 0x8a, 0xa2, 0x5d, 0xb5, 0x86, 0x36, 0x56, 0xb3, 0x82, 0x62, 0x55, 0xdf, 0xae, 0xfe, 0x4f, 0xaa, 0xaa, 0xa9, 0xa2, 0xa6, 0x96, 0x05, 0x47, 0xbf, 0xa2, 0xa1, 0x4a, 0x97, 0xae, 0x86, 0x79, 0x98, 0xaa, 0x1a, 0x7a, 0x97, 0xa6, 0x46, 0x71, 0xff, 0x92, 0xc2, 0x73, 0x8e, 0x8e, 0x8d, 0x86, 0x8a, 0xba, 0x29, 0x6b, 0x92, 0x86, 0x85, 0x6e, 0x8b, 0xb2, 0x9a, 0x65, 0x7b, 0x4e, 0xfe, 0x9e, 0x7b, 0x4a, 0xaa, 0x9d, 0x1e, 0x76, 0x26, 0x97, 0x72, 0x72, 0x71, 0x7a, 0x6e, 0x5e, 0xcd, 0x8f, 0x65, 0x6a, 0x69, 0x82, 0x6f, 0x56, 0x7e, 0x81, 0x66, 0x52, 0xe2, 0x82, 0x5f, 0x6e, 0x8e, 0xb9, 0x35, 0x5a, 0x0a, 0xbb, 0x56, 0x56, 0x55, 0x5e, 0x52, 0x62, 0xf1, 0xb3, 0x48, 0x4e, 0x4d, 0xa6, 0x43, 0x7a, 0x52, 0xad, 0x41, 0x76, 0xc6, 0xa6, 0x43, 0x72, 0x92, 0xa5, 0x5a, 0x3e, 0x6e, 0xdf, 0x3a, 0x3a, 0x39, 0x32, 0x36, 0x06, 0x95, 0xd7, 0x33, 0x32, 0x31, 0xda, 0x2f, 0x1e, 0x8d, 0xcf, 0x28, 0x2a, 0x89, 0xc9, 0x27, 0xf6, 0xae, 0xc6, 0x27, 0x92, 0xbc, 0xc4, 0x01, 0xe1, 0x32, 0xfd, 0x1f, 0xaa, 0x34, 0xfd, 0x17, 0xa6, 0x98, 0xf6, 0x07, 0xc2, 0x5c, 0xf2, 0x1f, 0x0e, 0x06, 0xe9, 0xe1, 0x3a, 0xa9, 0xeb, 0x0f, 0x36, 0x0e, 0xe1, 0x0b, 0x12, 0x1a, 0xe5, 0xfe, 0xde, 0x5d, 0x1d, 0x79, 0xdb, 0x59, 0x19, 0xf6, 0xd6, 0x77, 0x14, 0x71, 0xc0, 0x51, 0x11, 0xed, 0xde, 0xae, 0x0c, 0x68, 0xda, 0x49, 0x09, 0xe6, 0xd6, 0xa6, 0x04, 0x60, 0xd3, 0x41, 0x01, 0xd7, 0xee, 0xd6, 0x39, 0xd3, 0xea, 0xc2, 0x3d, 0xd4, 0xe4, 0x75, 0x35, 0xdb, 0xe2, 0xda, 0x35, 0xcf, 0xce, 0x6d, 0x2d, 0xc8, 0xca, 0x69, 0x29, 0xc7, 0x16, 0x4e, 0x26, 0xc7, 0x72, 0x5c, 0x24, 0xa1, 0x41, 0x92, 0x5d, 0xbb, 0xf2, 0x94, 0x51, 0xb3, 0x06, 0x38, 0x56, 0xa3, 0x62, 0xfc, 0x52, 0x0f, 0x8e, 0x32, 0x49, 0x0b, 0x9a, 0x36, 0x4d, 0xa4, 0x96, 0xe7, 0x44, 0x47, 0x92, 0x22, 0x42, 0x93, 0xae, 0x96, 0x79, 0x97, 0xaa, 0x82, 0x7d, 0x94, 0x96, 0x35, 0x75, 0xa5, 0x6d, 0x6e, 0x7b, 0x8f, 0xbe, 0x2d, 0x6d, 0x9b, 0xba, 0x82, 0x6d, 0x07, 0x96, 0x1a, 0x61, 0x8f, 0xb2, 0x9a, 0x65, 0x7c, 0x5e, 0xdd, 0x9d, 0x6b, 0x7a, 0x62, 0x9d, 0x5b, 0x89, 0x8a, 0x9f, 0x7f, 0x62, 0x6a, 0x95, 0x7f, 0x6e, 0x76, 0x89, 0x1c, 0x95, 0x96, 0x83, 0x6b, 0x76, 0x7e, 0x81, 0x03, 0x62, 0xfe, 0x85, 0x7f, 0xa1, 0xa2, 0xb7, 0x5b, 0x6a, 0xf9, 0xbb, 0x5f, 0x66, 0x5e, 0xb1, 0x5b, 0x72, 0x4a, 0xb5, 0x43, 0x7e, 0x56, 0xa9, 0x48, 0x4a, 0x1b, 0xa9, 0x4d, 0x46, 0x45, 0xee, 0x4b, 0x72, 0x5a, 0xa5, 0x2f, 0x1e, 0x26, 0xd9, 0x38, 0x0a, 0xbb, 0xd8 };

static int _debugger_present = -1;

void xorStringWalking(char inpString[]) 
{ 
    // Define initial XOR key value
    char xorKey = 0xFF; 
  
    // calculate length of input string 
    int len = strlen(inpString); 

    // Do a negative walking key XOR on the string
    for (int i = 0; i < len; i++) 
    { 
        inpString[i] = inpString[i] ^ xorKey--; 
    } 
} 

// Shamelessly stolen from stackoverflow: https://stackoverflow.com/a/24969863
bool debuggerIsAttachedProcSelf()
{
    char buf[4096];

    const int status_fd = ::open("/proc/self/status", O_RDONLY);
    if (status_fd == -1)
        return false;

    const ssize_t num_read = ::read(status_fd, buf, sizeof(buf) - 1);
    if (num_read <= 0)
        return false;

    buf[num_read] = '\0';
    constexpr char tracerPidString[] = "TracerPid:";
    const auto tracer_pid_ptr = ::strstr(buf, tracerPidString);
    if (!tracer_pid_ptr)
        return false;

    for (const char* characterPtr = tracer_pid_ptr + sizeof(tracerPidString) - 1; characterPtr <= buf + num_read; ++characterPtr)
    {
        if (::isspace(*characterPtr))
            continue;
        else
            return ::isdigit(*characterPtr) != 0 && *characterPtr != '0';
    }

    return false;
}

// Also stolen from stackoverflow: https://stackoverflow.com/a/8135517
static void _sigtrap_handler(int signum)
{
    _debugger_present = 0;
    signal(SIGTRAP, SIG_DFL);
}

// Check if we can detect any debuggers attached to the process
void checkDebugger()
{
    if(debuggerIsAttachedProcSelf())
    {
        _debugger_present = 0;
    }

    if(_debugger_present != -1) {
        char printString[] = { 0xbb, 0x9b, 0x9f, 0x89, 0x9c, 0x9d, 0x9c, 0x8a, 0xd7, 0x92, 0x90, 0x80, 0x96, 0x91, 0x85, 0x95, 0x8b, 0xc2, 0xcd, 0x89, 0x93, 0x83, 0x9d, 0x81, 0x89, 0x81, 0xef }; // "Debugger detected, exiting\n"
        xorStringWalking(printString);
        printf(printString);
        kill(getpid(), SIGKILL);
    }
}

// Keep checking for debuggers, not just an initial check
void spinCheckDebugger()
{
    while(1)
    {
        checkDebugger();
        sleep(1);
    }
}

int main(int argc, char *argv[])
{
    // Check for debuggers
    checkDebugger();

    // Spawn and detach a thread to keep checking for debuggers
    std::thread t1(spinCheckDebugger);
    t1.detach();

    // Allocate an area of memory to load the payload into
    void* payloadExec = mmap(0, 1024, PROT_READ | PROT_WRITE | PROT_EXEC, MAP_ANONYMOUS | MAP_PRIVATE, -1, 0);

    // Copy the encrypted payload into memory
    memcpy(payloadExec, payload, 0x1C8);

    // Decrypt the payload
    xorStringWalking((char*)payloadExec);

    // Execute the loaded and decrypted payload
    // We want the passed text to be "zipline"
    int result = ((int(*)(char(*)))payloadExec)(argv[1]);

    // Re-encrypt the payload so can't be seen in a post execution dump
    xorStringWalking((char*)payloadExec);

    // Print out a string depending on whether the person got the correct result or not
    char* printString;
    if(result == 0)
    {
        static char locArray[] = { 0xac, 0x8b, 0x9e, 0x9f, 0x9e, 0x89, 0x8a, 0xd9, 0xfd }; // "Success!\n"
        printString = locArray;
    }
    else
    {
        static char locArray[] = { 0xa6, 0x91, 0x88, 0xdc, 0x9f, 0x93, 0x9d, 0x96, 0xd0, 0x82, 0xd5, 0x91, 0x9d, 0x86, 0x94, 0x82, 0xcf, 0x9a, 0x85, 0x89, 0xcb, 0x89, 0x86, 0x9a, 0x95, 0x83, 0x86, 0x90, 0xc3, 0x89, 0x84, 0x99, 0xff, 0xe4, 0xf5, 0xd6 }; // "You didn't enter the correct key :(\n"
        printString = locArray;
    }

    // Decrypt the result strings
    xorStringWalking(printString);
    printf(printString);

    exit(result);
}